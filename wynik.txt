.lintstagedrc
{
  '{,src/**/}*.{md,json,ts,tsx,js,jsx,css,scss,html,yml,mdx,astro}': ['git add']
}


.prettierrc
{
  "tabWidth": 2,
  "useTabs": false,
  "singleQuote": true,
  "semi": true,
  "bracketSpacing": true,
  "arrowParens": "always",
  "trailingComma": "es5",
  "bracketSameLine": false,
  "printWidth": 140,
  "endOfLine": "lf",
  "useEditorConfig": true,
  "importOrder": [
    "^react",
    "^@?\\w",
    "^[./]"
  ],
  "importOrderSeparation": true,
  "importOrderSortSpecifiers": true,
  "overrides": [
    {
      "files": "*.scss",
      "options": {
        "singleQuote": false
      }
    },
    {
      "files": "*.astro",
      "options": {
        "parser": "astro"
      }
    }
  ]
}

astro.config.mjs
// @ts-check
import { defineConfig } from 'astro/config';
import mdx from '@astrojs/mdx';
import sitemap from '@astrojs/sitemap';
import react from '@astrojs/react';
import tinaDirective from './astro-tina-directive/register';
import tailwindcss from '@tailwindcss/vite';

// https://astro.build/config
export default defineConfig({
  site: process.env.SITE_URL,
  integrations: [mdx(), sitemap(), react(), tinaDirective()],
  vite: { plugins: [tailwindcss()] },
});


package.json
{
  "name": "my-tina-app",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "tinacms dev -c \"astro dev\"",
    "build": "tinacms build && astro build",
    "preview": "astro preview",
    "astro": "astro",
    "prepare": "husky .husky",
    "test:e2e": "npx playwright test",
    "test:e2e:report": "npx playwright show-report",
    "prettier:format": "prettier --write --html-whitespace-sensitivity ignore src/**/*{.astro, .tsx,.ts,.js,.jsx,.json,.css,.scss,.html,.md,.mdx}"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx,yml,html,md,json}": [
      "eslint --fix",
      "git add"
    ],
    "*.{css,scss}": [
      "stylelint --fix",
      "git add"
    ]
  },
  "dependencies": {
    "@astrojs/mdx": "^4.3.0",
    "@astrojs/react": "^4.3.0",
    "@astrojs/rss": "^4.0.11",
    "@astrojs/sitemap": "^3.4.0",
    "@tailwindcss/vite": "^4.1.8",
    "@tanstack/react-virtual": "^3.13.9",
    "astro": "^5.9.2",
    "classnames": "^2.5.1",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-icons": "^5.5.0",
    "tailwindcss": "^4.1.8",
    "tinacms": "^2.7.8"
  },
  "devDependencies": {
    "@playwright/test": "^1.53.0",
    "@tinacms/cli": "^1.9.8",
    "@types/node": "^22.15.29",
    "husky": "^9.1.7",
    "lint-staged": "^16.1.0",
    "prettier": "^3.5.3",
    "prettier-plugin-astro": "^0.14.1"
  },
  "recommendations": [
    "esbenp.prettier-vscode",
    "dbaeumer.vscode-eslint",
    "stylelint.vscode-stylelint",
    "yoavbls.pretty-ts-errors",
    "astro-build.astro-vscode",
    "unifiedjs.vscode-mdx",
    "ms-playwright.playwright"
  ],
  "browserslist": [
    "last 5 Chrome versions",
    "last 15 Firefox versions",
    "last 4 Edge major versions",
    "last 4 Safari major versions",
    "last 2 iOS major versions",
    "Firefox ESR",
    "not ios_saf 15.2-15.3",
    "not safari 15.2-15.3"
  ]
}

playwright.config.ts
import { defineConfig } from '@playwright/test';

export default defineConfig({
  testDir: './tests',
  timeout: 10000,
  retries: 0,
  reporter: [['html']],
  use: {
    headless: true,
    baseURL: 'http://localhost:4321', // domyœlny port Astro
  },
});


tsconfig.json
{
  "extends": "astro/tsconfigs/strict",
  "include": [".astro/types.d.ts", "**/*"],
  "exclude": ["dist"],
  "compilerOptions": {
    "strictNullChecks": true
  }
}


.astro\content-assets.mjs
export default new Map();

.astro\content-modules.mjs
export default new Map();

.astro\content.d.ts
declare module 'astro:content' {
	interface Render {
		'.mdx': Promise<{
			Content: import('astro').MarkdownInstance<{}>['Content'];
			headings: import('astro').MarkdownHeading[];
			remarkPluginFrontmatter: Record<string, any>;
			components: import('astro').MDXInstance<{}>['components'];
		}>;
	}
}

declare module 'astro:content' {
	export interface RenderResult {
		Content: import('astro/runtime/server/index.js').AstroComponentFactory;
		headings: import('astro').MarkdownHeading[];
		remarkPluginFrontmatter: Record<string, any>;
	}
	interface Render {
		'.md': Promise<RenderResult>;
	}

	export interface RenderedContent {
		html: string;
		metadata?: {
			imagePaths: Array<string>;
			[key: string]: unknown;
		};
	}
}

declare module 'astro:content' {
	type Flatten<T> = T extends { [K: string]: infer U } ? U : never;

	export type CollectionKey = keyof AnyEntryMap;
	export type CollectionEntry<C extends CollectionKey> = Flatten<AnyEntryMap[C]>;

	export type ContentCollectionKey = keyof ContentEntryMap;
	export type DataCollectionKey = keyof DataEntryMap;

	type AllValuesOf<T> = T extends any ? T[keyof T] : never;
	type ValidContentEntrySlug<C extends keyof ContentEntryMap> = AllValuesOf<
		ContentEntryMap[C]
	>['slug'];

	export type ReferenceDataEntry<
		C extends CollectionKey,
		E extends keyof DataEntryMap[C] = string,
	> = {
		collection: C;
		id: E;
	};
	export type ReferenceContentEntry<
		C extends keyof ContentEntryMap,
		E extends ValidContentEntrySlug<C> | (string & {}) = string,
	> = {
		collection: C;
		slug: E;
	};

	/** @deprecated Use `getEntry` instead. */
	export function getEntryBySlug<
		C extends keyof ContentEntryMap,
		E extends ValidContentEntrySlug<C> | (string & {}),
	>(
		collection: C,
		// Note that this has to accept a regular string too, for SSR
		entrySlug: E,
	): E extends ValidContentEntrySlug<C>
		? Promise<CollectionEntry<C>>
		: Promise<CollectionEntry<C> | undefined>;

	/** @deprecated Use `getEntry` instead. */
	export function getDataEntryById<C extends keyof DataEntryMap, E extends keyof DataEntryMap[C]>(
		collection: C,
		entryId: E,
	): Promise<CollectionEntry<C>>;

	export function getCollection<C extends keyof AnyEntryMap, E extends CollectionEntry<C>>(
		collection: C,
		filter?: (entry: CollectionEntry<C>) => entry is E,
	): Promise<E[]>;
	export function getCollection<C extends keyof AnyEntryMap>(
		collection: C,
		filter?: (entry: CollectionEntry<C>) => unknown,
	): Promise<CollectionEntry<C>[]>;

	export function getEntry<
		C extends keyof ContentEntryMap,
		E extends ValidContentEntrySlug<C> | (string & {}),
	>(
		entry: ReferenceContentEntry<C, E>,
	): E extends ValidContentEntrySlug<C>
		? Promise<CollectionEntry<C>>
		: Promise<CollectionEntry<C> | undefined>;
	export function getEntry<
		C extends keyof DataEntryMap,
		E extends keyof DataEntryMap[C] | (string & {}),
	>(
		entry: ReferenceDataEntry<C, E>,
	): E extends keyof DataEntryMap[C]
		? Promise<DataEntryMap[C][E]>
		: Promise<CollectionEntry<C> | undefined>;
	export function getEntry<
		C extends keyof ContentEntryMap,
		E extends ValidContentEntrySlug<C> | (string & {}),
	>(
		collection: C,
		slug: E,
	): E extends ValidContentEntrySlug<C>
		? Promise<CollectionEntry<C>>
		: Promise<CollectionEntry<C> | undefined>;
	export function getEntry<
		C extends keyof DataEntryMap,
		E extends keyof DataEntryMap[C] | (string & {}),
	>(
		collection: C,
		id: E,
	): E extends keyof DataEntryMap[C]
		? string extends keyof DataEntryMap[C]
			? Promise<DataEntryMap[C][E]> | undefined
			: Promise<DataEntryMap[C][E]>
		: Promise<CollectionEntry<C> | undefined>;

	/** Resolve an array of entry references from the same collection */
	export function getEntries<C extends keyof ContentEntryMap>(
		entries: ReferenceContentEntry<C, ValidContentEntrySlug<C>>[],
	): Promise<CollectionEntry<C>[]>;
	export function getEntries<C extends keyof DataEntryMap>(
		entries: ReferenceDataEntry<C, keyof DataEntryMap[C]>[],
	): Promise<CollectionEntry<C>[]>;

	export function render<C extends keyof AnyEntryMap>(
		entry: AnyEntryMap[C][string],
	): Promise<RenderResult>;

	export function reference<C extends keyof AnyEntryMap>(
		collection: C,
	): import('astro/zod').ZodEffects<
		import('astro/zod').ZodString,
		C extends keyof ContentEntryMap
			? ReferenceContentEntry<C, ValidContentEntrySlug<C>>
			: ReferenceDataEntry<C, keyof DataEntryMap[C]>
	>;
	// Allow generic `string` to avoid excessive type errors in the config
	// if `dev` is not running to update as you edit.
	// Invalid collection names will be caught at build time.
	export function reference<C extends string>(
		collection: C,
	): import('astro/zod').ZodEffects<import('astro/zod').ZodString, never>;

	type ReturnTypeOrOriginal<T> = T extends (...args: any[]) => infer R ? R : T;
	type InferEntrySchema<C extends keyof AnyEntryMap> = import('astro/zod').infer<
		ReturnTypeOrOriginal<Required<ContentConfig['collections'][C]>['schema']>
	>;

	type ContentEntryMap = {
		
	};

	type DataEntryMap = {
		"blog": Record<string, {
  id: string;
  body?: string;
  collection: "blog";
  data: InferEntrySchema<"blog">;
  rendered?: RenderedContent;
  filePath?: string;
}>;
"page": Record<string, {
  id: string;
  body?: string;
  collection: "page";
  data: InferEntrySchema<"page">;
  rendered?: RenderedContent;
  filePath?: string;
}>;

	};

	type AnyEntryMap = ContentEntryMap & DataEntryMap;

	export type ContentConfig = typeof import("./../src/content.config.js");
}


.astro\data-store.json
[["Map",1,2,9,10,216,217],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.9.2","content-config-digest","cfa1980b22b5bd1a","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"http://localhost:4321\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"experimentalDefaultStyles\":true},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"csp\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,24,25,34,35,44,45,54,55,63,64,72,73,81,82,90,91,99,100,108,109,117,118,126,127,135,136,144,145,153,154,162,163,171,172,180,181,189,190,198,199,207,208],"cms-integration",{"id":11,"data":13},{"tinaInfo":14,"title":17,"description":18,"pubDate":19,"updatedDate":20,"heroImage":21,"author":22,"category":23},{"filename":11,"basename":15,"path":16,"relativePath":15},"cms-integration.mdx","src/content/blog/cms-integration.mdx","Integracja z TinaCMS","Jak po³¹czyæ Astro z TinaCMS i tworzyæ dynamiczne strony.",["Date","2024-06-10T00:00:00.000Z"],["Date","1970-01-01T00:00:00.000Z"],"/blog-placeholder.jpg","xyx","abc","hello-world",{"id":24,"data":26},{"tinaInfo":27,"title":30,"description":31,"pubDate":32,"updatedDate":33,"heroImage":21,"author":22,"category":23},{"filename":24,"basename":28,"path":29,"relativePath":28},"hello-world.mdx","src/content/blog/hello-world.mdx","Witaj, œwiecie!","Pierwszy wpis na blogu. Krótkie powitanie i cel istnienia tej strony.",["Date","2024-06-01T00:00:00.000Z"],["Date","1970-01-01T00:00:00.000Z"],"markdown-style-guide",{"id":34,"data":36},{"tinaInfo":37,"title":40,"description":41,"pubDate":42,"updatedDate":43,"heroImage":21,"author":22,"category":23},{"filename":34,"basename":38,"path":39,"relativePath":38},"markdown-style-guide.mdx","src/content/blog/markdown-style-guide.mdx","Dlaczego Astro?","Poznaj zalety frameworka Astro w nowoczesnym frontendzie.",["Date","2024-06-05T00:00:00.000Z"],["Date","1970-01-01T00:00:00.000Z"],"third-post",{"id":44,"data":46},{"tinaInfo":47,"title":50,"description":51,"pubDate":52,"updatedDate":53,"heroImage":21,"author":22,"category":23},{"filename":44,"basename":48,"path":49,"relativePath":48},"third-post.mdx","src/content/blog/third-post.mdx","Third post","Lorem ipsum dolor sit amet",["Date","2022-07-21T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-mdx",{"id":54,"data":56},{"tinaInfo":57,"title":60,"description":51,"pubDate":61,"updatedDate":62,"heroImage":21,"author":22,"category":23},{"filename":54,"basename":58,"path":59,"relativePath":58},"using-mdx.mdx","src/content/blog/using-mdx.mdx","Using MDX?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-10",{"id":63,"data":65},{"tinaInfo":66,"title":69,"description":51,"pubDate":70,"updatedDate":71,"heroImage":21,"author":22,"category":23},{"filename":63,"basename":67,"path":68,"relativePath":67},"using-next-10.mdx","src/content/blog/using-next-10.mdx","Using MDX 10 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-11",{"id":72,"data":74},{"tinaInfo":75,"title":78,"description":51,"pubDate":79,"updatedDate":80,"heroImage":21,"author":22,"category":23},{"filename":72,"basename":76,"path":77,"relativePath":76},"using-next-11.mdx","src/content/blog/using-next-11.mdx","Using MDX 11 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-12",{"id":81,"data":83},{"tinaInfo":84,"title":87,"description":51,"pubDate":88,"updatedDate":89,"heroImage":21,"author":22,"category":23},{"filename":81,"basename":85,"path":86,"relativePath":85},"using-next-12.mdx","src/content/blog/using-next-12.mdx","Using MDX 12 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-13",{"id":90,"data":92},{"tinaInfo":93,"title":96,"description":51,"pubDate":97,"updatedDate":98,"heroImage":21,"author":22,"category":23},{"filename":90,"basename":94,"path":95,"relativePath":94},"using-next-13.mdx","src/content/blog/using-next-13.mdx","Using MDX 13 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-14",{"id":99,"data":101},{"tinaInfo":102,"title":105,"description":51,"pubDate":106,"updatedDate":107,"heroImage":21,"author":22,"category":23},{"filename":99,"basename":103,"path":104,"relativePath":103},"using-next-14.mdx","src/content/blog/using-next-14.mdx","Using MDX 14 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-15",{"id":108,"data":110},{"tinaInfo":111,"title":114,"description":51,"pubDate":115,"updatedDate":116,"heroImage":21,"author":22,"category":23},{"filename":108,"basename":112,"path":113,"relativePath":112},"using-next-15.mdx","src/content/blog/using-next-15.mdx","Using MDX 15 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-16",{"id":117,"data":119},{"tinaInfo":120,"title":123,"description":51,"pubDate":124,"updatedDate":125,"heroImage":21,"author":22,"category":23},{"filename":117,"basename":121,"path":122,"relativePath":121},"using-next-16.mdx","src/content/blog/using-next-16.mdx","Using MDX 16 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-17",{"id":126,"data":128},{"tinaInfo":129,"title":132,"description":51,"pubDate":133,"updatedDate":134,"heroImage":21,"author":22,"category":23},{"filename":126,"basename":130,"path":131,"relativePath":130},"using-next-17.mdx","src/content/blog/using-next-17.mdx","Using MDX 17 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-2",{"id":135,"data":137},{"tinaInfo":138,"title":141,"description":51,"pubDate":142,"updatedDate":143,"heroImage":21,"author":22,"category":23},{"filename":135,"basename":139,"path":140,"relativePath":139},"using-next-2.mdx","src/content/blog/using-next-2.mdx","Using MDX 2 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-3",{"id":144,"data":146},{"tinaInfo":147,"title":150,"description":51,"pubDate":151,"updatedDate":152,"heroImage":21,"author":22,"category":23},{"filename":144,"basename":148,"path":149,"relativePath":148},"using-next-3.mdx","src/content/blog/using-next-3.mdx","Using MDX 3 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-4",{"id":153,"data":155},{"tinaInfo":156,"title":159,"description":51,"pubDate":160,"updatedDate":161,"heroImage":21,"author":22,"category":23},{"filename":153,"basename":157,"path":158,"relativePath":157},"using-next-4.mdx","src/content/blog/using-next-4.mdx","Using MDX 4 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-5",{"id":162,"data":164},{"tinaInfo":165,"title":168,"description":51,"pubDate":169,"updatedDate":170,"heroImage":21,"author":22,"category":23},{"filename":162,"basename":166,"path":167,"relativePath":166},"using-next-5.mdx","src/content/blog/using-next-5.mdx","Using MDX 5 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-6",{"id":171,"data":173},{"tinaInfo":174,"title":177,"description":51,"pubDate":178,"updatedDate":179,"heroImage":21,"author":22,"category":23},{"filename":171,"basename":175,"path":176,"relativePath":175},"using-next-6.mdx","src/content/blog/using-next-6.mdx","Using MDX 6 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-7",{"id":180,"data":182},{"tinaInfo":183,"title":186,"description":51,"pubDate":187,"updatedDate":188,"heroImage":21,"author":22,"category":23},{"filename":180,"basename":184,"path":185,"relativePath":184},"using-next-7.mdx","src/content/blog/using-next-7.mdx","Using MDX 7 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-8",{"id":189,"data":191},{"tinaInfo":192,"title":195,"description":51,"pubDate":196,"updatedDate":197,"heroImage":21,"author":22,"category":23},{"filename":189,"basename":193,"path":194,"relativePath":193},"using-next-8.mdx","src/content/blog/using-next-8.mdx","Using MDX 8 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-9",{"id":198,"data":200},{"tinaInfo":201,"title":204,"description":51,"pubDate":205,"updatedDate":206,"heroImage":21,"author":22,"category":23},{"filename":198,"basename":202,"path":203,"relativePath":202},"using-next-9.mdx","src/content/blog/using-next-9.mdx","Using MDX 9 next?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"using-next-mdx",{"id":207,"data":209},{"tinaInfo":210,"title":213,"description":51,"pubDate":214,"updatedDate":215,"heroImage":21,"author":22,"category":23},{"filename":207,"basename":211,"path":212,"relativePath":211},"using-next-mdx.mdx","src/content/blog/using-next-mdx.mdx","Using MDX 2?!",["Date","2024-05-31T14:00:00.000Z"],["Date","2025-01-02T14:00:00.000Z"],"page",["Map",218,219,250,251],"about",{"id":218,"data":220},{"tinaInfo":221,"seoTitle":224,"body":225},{"filename":218,"basename":222,"path":223,"relativePath":222},"about.mdx","src/content/page/about.mdx","About",{"type":226,"children":227},"root",[228,234,238,242,246],{"type":229,"children":230},"p",[231],{"type":232,"text":233},"text","Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer\nmalesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas\npretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac\nhabitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus\net malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam\nphasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse\nplatea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi.\nDictumst quisque sagittis purus sit amet.",{"type":229,"children":235},[236],{"type":232,"text":237},"Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum\nquisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet.\nTellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus.\nAccumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit\nullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa\ntincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim\nnunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui\nvivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris.\nSed tempus urna et pharetra pharetra massa massa ultricies mi.",{"type":229,"children":239},[240],{"type":232,"text":241},"Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam\nsit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis\ndonec. Egestas integer eget aliquet nibh praesent tristique magna sit amet.\nEget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum.\nTristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed\nviverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut\nconsequat semper viverra nam. Laoreet suspendisse interdum consectetur libero\nid faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique.\nRhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt\narcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate.\nViverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare.\nFringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo\ndonec enim.",{"type":229,"children":243},[244],{"type":232,"text":245},"Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut\nconsequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem\nviverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu\nac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac\ntortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus\npellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit\namet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id\ndonec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.",{"type":229,"children":247},[248],{"type":232,"text":249},"Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus\nimperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu\ncursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum.\nTincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero\nvolutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar\nproin gravida. Egestas integer eget aliquet nibh praesent tristique magna.","home",{"id":250,"data":252},{"tinaInfo":253,"seoTitle":256,"body":257},{"filename":250,"basename":254,"path":255,"relativePath":254},"home.mdx","src/content/page/home.mdx","Home",{"type":226,"children":258},[259,264,284,300,304,376],{"type":260,"children":261},"h1",[262],{"type":232,"text":263},"????? Hello, Astronaut!",{"type":229,"children":265},[266,268,275,277,282],{"type":232,"text":267},"Welcome to the official ",{"type":269,"url":270,"title":271,"children":272},"a","https://astro.build/",null,[273],{"type":232,"text":274},"Astro",{"type":232,"text":276}," + ",{"type":269,"url":278,"title":271,"children":279},"https://tina.io/",[280],{"type":232,"text":281},"TinaCMS",{"type":232,"text":283}," starter template! This template serves as a lightweight, minimally-styled starting point for anyone looking to build a personal website, blog, or portfolio with Astro and TinaCMS.",{"type":229,"children":285},[286,288,291,293,298],{"type":232,"text":287},"This template comes with a few integrations already configured in your ",{"type":232,"text":289,"code":290},"astro.config.mjs",true,{"type":232,"text":292}," file. You can customize this further with ",{"type":269,"url":294,"title":271,"children":295},"https://astro.build/integrations",[296],{"type":232,"text":297},"Astro Integrations",{"type":232,"text":299}," to add tools like Tailwind to your project.",{"type":229,"children":301},[302],{"type":232,"text":303},"Here are a few ideas on how to get started with the template:",{"type":305,"children":306},"ul",[307,325,341,349,364],{"type":308,"children":309},"li",[310],{"type":311,"children":312},"lic",[313,315,317,319,321,323],{"type":232,"text":314,"bold":290},"Edit this page",{"type":232,"text":316},": Navigate to ",{"type":232,"text":318,"code":290},"/admin",{"type":232,"text":320}," to update your homepage content in TinaCMS or manually edit ",{"type":232,"text":322,"code":290},"src/pages/index.astro",{"type":232,"text":324}," for full control.",{"type":308,"children":326},[327],{"type":311,"children":328},[329,331,333,335,337,339],{"type":232,"text":330,"bold":290},"Site Header",{"type":232,"text":332},": Customize the navigation items in TinaCMS under the ",{"type":232,"text":334,"bold":290},"Config Collection",{"type":232,"text":336}," or via ",{"type":232,"text":338,"code":290},"src/components/Header.astro",{"type":232,"text":340},".",{"type":308,"children":342},[343],{"type":311,"children":344},[345,347],{"type":232,"text":346,"bold":290},"Site Footer",{"type":232,"text":348},": Make it yours by adding your name or details in TinaCMS Global Config.",{"type":308,"children":350},[351],{"type":311,"children":352},[353,355,357,359,361,363],{"type":232,"text":354,"bold":290},"Explore Blog Posts",{"type":232,"text":356},": Check out sample posts in ",{"type":232,"text":358,"code":290},"src/content/blog",{"type":232,"text":360}," to see how content is structured or edit them in TinaCMS under the ",{"type":232,"text":362,"bold":290},"Blog Collection",{"type":232,"text":340},{"type":308,"children":365},[366],{"type":311,"children":367},[368,370,372,374],{"type":232,"text":369,"bold":290},"Layout Customization",{"type":232,"text":371},": Update the blog post page layout in ",{"type":232,"text":373,"code":290},"src/layouts/BlogPost.astro",{"type":232,"text":375}," for a unique look.",{"type":229,"children":377},[378,380,385,387,392,394,399],{"type":232,"text":379},"Have fun! If you get stuck, remember to check out the ",{"type":269,"url":381,"title":271,"children":382},"https://docs.astro.build/en/getting-started/",[383],{"type":232,"text":384},"Astro documentation",{"type":232,"text":386}," or ",{"type":269,"url":388,"title":271,"children":389},"https://tina.io/docs",[390],{"type":232,"text":391},"TinaCMS documentation",{"type":232,"text":393}," for guidance. You can also join the ",{"type":269,"url":395,"title":271,"children":396},"https://discord.com/invite/zumN63Ybpf",[397],{"type":232,"text":398},"TinaCMS Discord",{"type":232,"text":400}," community to ask questions and connect with other users."]

.astro\settings.json
{
	"_variables": {
		"lastUpdateCheck": 1749586754483
	}
}

.astro\types.d.ts
/// <reference types="astro/client" />
/// <reference path="content.d.ts" />

.astro\collections\blog.schema.json
{
  "$ref": "#/definitions/blog",
  "definitions": {
    "blog": {
      "type": "object",
      "properties": {
        "tinaInfo": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string"
            },
            "basename": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "relativePath": {
              "type": "string"
            }
          },
          "required": [
            "filename",
            "basename",
            "path",
            "relativePath"
          ],
          "additionalProperties": false
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "pubDate": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "integer",
              "format": "unix-time"
            }
          ]
        },
        "updatedDate": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "string",
              "format": "date"
            },
            {
              "type": "integer",
              "format": "unix-time"
            }
          ]
        },
        "heroImage": {
          "type": [
            "string",
            "null"
          ]
        },
        "author": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        }
      },
      "required": [
        "tinaInfo",
        "title",
        "description",
        "pubDate",
        "author",
        "category"
      ],
      "additionalProperties": false
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}

.astro\collections\footer.schema.json
{
  "$ref": "#/definitions/footer",
  "definitions": {
    "footer": {
      "type": "object",
      "properties": {
        "tinaInfo": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string"
            },
            "basename": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "relativePath": {
              "type": "string"
            }
          },
          "required": [
            "filename",
            "basename",
            "path",
            "relativePath"
          ],
          "additionalProperties": false
        },
        "body": {},
        "$schema": {
          "type": "string"
        }
      },
      "required": [
        "tinaInfo"
      ],
      "additionalProperties": false
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}

.astro\collections\page.schema.json
{
  "$ref": "#/definitions/page",
  "definitions": {
    "page": {
      "type": "object",
      "properties": {
        "tinaInfo": {
          "type": "object",
          "properties": {
            "filename": {
              "type": "string"
            },
            "basename": {
              "type": "string"
            },
            "path": {
              "type": "string"
            },
            "relativePath": {
              "type": "string"
            }
          },
          "required": [
            "filename",
            "basename",
            "path",
            "relativePath"
          ],
          "additionalProperties": false
        },
        "seoTitle": {
          "type": "string"
        },
        "body": {},
        "$schema": {
          "type": "string"
        }
      },
      "required": [
        "tinaInfo",
        "seoTitle"
      ],
      "additionalProperties": false
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}

astro-tina-directive\index.d.ts
import 'astro'
declare module 'astro' {
  interface AstroClientDirectives {
    'client:tina'?: boolean
  }
}

astro-tina-directive\register.js
/**
 * @type {() => import('astro').AstroIntegration}
 */
export default () => ({
  name: "client:tina",
  hooks: {
    "astro:config:setup": ({ addClientDirective }) => {
      addClientDirective({
        name: "tina",
        entrypoint: "./astro-tina-directive/tina.js", 
      });
    },
  },
});


astro-tina-directive\tina.js
/**
 * Hydrate on first click on the window
 * @type {import('astro').ClientDirective}
 */
export default async (load, options, el) => {
  try {
    const isInIframe = window.self !== window.top;
    if (!isInIframe) {
      return;
    }
    
    const hydrate = await load();
    await hydrate();
  } catch (error) {
    console.error("An error occurred in the Tina client directive:", error);
  }
};


src\content.config.ts
import { defineCollection, z } from 'astro:content';
import client from '../tina/__generated__/client';

const blog = defineCollection({
  loader: async () => {
    const postsResponse = await client.queries.blogConnection();

    // Map Tina posts to the correct format for Astro
    return postsResponse.data.blogConnection.edges
      ?.filter((post) => !!post)
      .map((post) => {
        const node = post?.node;

        return {
          ...node,
          id: node?._sys.relativePath.replace(/\.mdx?$/, ''), // Generate clean URLs
          tinaInfo: node?._sys, // Include Tina system info if needed
        };
      });
  },
  schema: z.object({
    tinaInfo: z.object({
      filename: z.string(),
      basename: z.string(),
      path: z.string(),
      relativePath: z.string(),
    }),
    title: z.string(),
    description: z.string(),
    pubDate: z.coerce.date(),
    updatedDate: z.coerce.date().optional(),
    heroImage: z.string().nullish(),
    author: z.string(),
    category: z.string(),
  }),
});

const page = defineCollection({
  loader: async () => {
    const postsResponse = await client.queries.pageConnection();

    // Map Tina posts to the correct format for Astro
    return postsResponse.data.pageConnection.edges
      ?.filter((p) => !!p)
      .map((p) => {
        const node = p?.node;

        return {
          ...node,
          id: node?._sys.relativePath.replace(/\.mdx?$/, ''), // Generate clean URLs
          tinaInfo: node?._sys, // Include Tina system info if needed
        };
      });
  },
  schema: z.object({
    tinaInfo: z.object({
      filename: z.string(),
      basename: z.string(),
      path: z.string(),
      relativePath: z.string(),
    }),
    seoTitle: z.string(),
    body: z.any(),
  }),
});

export const collections = { blog, page };


src\components\BaseHead.astro
---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../styles/global.css';
import { ClientRouter } from 'astro:transitions';

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=swap"
      rel="stylesheet"
    />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />


<ClientRouter />


src\components\BlogCard.astro
---
import Icon from './Icon.astro';

const { post } = Astro.props;
const { title, pubDate, description, category, heroImage, author } = post.data;
---

<article class="blog-card">
  {heroImage && <img src={heroImage} alt={title} class="h-48 w-full object-cover" loading="lazy" />}
  <div class="flex flex-col flex-1 p-5">
    <div class="text-sm text-gray-500 flex items-center gap-2 mb-2">
      <span class="flex items-center gap-1"><Icon name="user" /> {author}</span>
      <span class="flex items-center gap-1"><Icon name="calendar" /> {new Date(pubDate).toLocaleDateString('pl-PL')}</span>
      {
        category && (
          <span class="flex items-center gap-1 text-indigo-500 font-medium">
            <Icon name="tag" /> | {category}
          </span>
        )
      }
    </div>
    <h2 class="text-lg font-extrabold text-purple-700 leading-snug mb-2">
      {title}
    </h2>
    <p class="text-gray-600 text-sm flex-1">{description}</p>
    <div class="mt-4">
      <a
        href={`/blog/${post.slug ?? post.id}`}
        class="inline-block bg-orange-500 text-white text-sm font-medium px-4 py-2 rounded-full hover:bg-orange-600 transition"
      >
        Read More
      </a>
    </div>
  </div>
</article>


src\components\Footer.astro
---
import { getEntry } from 'astro:content';
import client from '../../tina/__generated__/client';
import FooterText from '../../tina/pages/FooterText';
import config from '../content/config/config.json';
import HeaderLink from './HeaderLink.astro';
import IconLink from './react/IconLink';
const today = new Date();

const footerNav = config['footerNav'];

const footerData = await client.queries.footer({ relativePath: 'footer.mdx' });
---

<footer class="bg-[#1f1e24] text-white px-4 py-10 text-sm">
  <div class="grid gap-8 md:grid-cols-3">
    <div class="flex">
      <FooterText {...footerData} client:load />
    </div>

    <div class="flex justify-center">
      {config.contactLinks?.map((link) => <IconLink {...link} className="text-white hover:text-orange-500" />)}
    </div>

    <ul class="flex gap-3 justify-end">
      {
        footerNav.map((item) => (
          <HeaderLink href={item.link} isFooter>
            {item.title}
          </HeaderLink>
        ))
      }
    </ul>
  </div>

  <div class="mt-10 flex justify-center gap-4">
    <p class="text-slate-50 text-xs">&copy; {today.getFullYear()} {config.seo.siteOwner}. All rights reserved.</p>
  </div>
</footer>


src\components\FormattedDate.astro
---
interface Props {
	date: Date;
}

const { date } = Astro.props;
---

<time datetime={date.toISOString()}>
	{
		date.toLocaleDateString('en-us', {
			year: 'numeric',
			month: 'short',
			day: 'numeric',
		})
	}
</time>


src\components\Header.astro
---
import HeaderLink from './HeaderLink.astro';
import config from '../content/config/config.json';
import IconLink from './react/IconLink';
---

<header class="shadow-md z-50 relative">
  <nav class="flex justify-between items-center p-4 w-full" role="navigation" aria-label="Main navigation">
    <h2 class="text-xl font-bold text-sky-800 hover:text-indigo-500">
      <a href="/">{config.seo.title}</a>
    </h2>

    <ul class="hidden md:flex gap-4 items-center">
      {
        config.nav?.map((nav) => (
          <li>
            <HeaderLink href={nav.link}>{nav.title}</HeaderLink>
          </li>
        ))
      }
    </ul>

    <div class="hidden md:flex gap-4">
      {config.contactLinks?.map((link) => <IconLink {...link} className="text-sky-800 hover:text-indigo-500" />)}
    </div>

    <button
      id="burger-btn"
      class="md:hidden z-50 w-10 h-10 flex items-center justify-center cursor-pointer"
      aria-label="Toggle menu"
      aria-expanded="false"
    >
      <svg
        id="icon-menu"
        xmlns="http://www.w3.org/2000/svg"
        class="w-6 h-6 text-sky-800"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
      <svg
        id="icon-close"
        xmlns="http://www.w3.org/2000/svg"
        class="w-6 h-6 text-sky-800 hidden"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </nav>

  <div
    id="nav-menu"
    class="fixed inset-0 z-40 flex flex-col items-center justify-center bg-white transition-all duration-300 ease-in-out scale-0 opacity-0 md:hidden"
    role="dialog"
    aria-modal="true"
  >
    <ul class="flex flex-col gap-6 text-lg font-semibold">
      {
        config.nav?.map((nav) => (
          <li>
            <a href={nav.link} class="text-sky-800 hover:text-indigo-500 nav-link">
              {nav.title}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="flex gap-6 mt-8">
      {config.contactLinks.map((link) => <IconLink {...link} className="text-sky-800 hover:text-indigo-500" />)}
    </div>
  </div>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', () => {
      const burgerBtn = document.getElementById('burger-btn');
      const navMenu = document.getElementById('nav-menu');

      const toggleMenu = () => {
        burgerBtn?.classList.toggle('open');
        navMenu?.classList.toggle('scale-0');
        navMenu?.classList.toggle('opacity-0');
        navMenu?.classList.toggle('scale-100');
        navMenu?.classList.toggle('opacity-100');

        document.getElementById('icon-menu')?.classList.toggle('hidden');
        document.getElementById('icon-close')?.classList.toggle('hidden');
      };

      burgerBtn?.addEventListener('click', toggleMenu);

      document.addEventListener('click', (e) => {
        if (e.target.matches('.nav-link')) {
          toggleMenu();
        }
      });
    });
  </script>
</header>


src\components\HeaderLink.astro
---
import type { HTMLAttributes } from 'astro/types';
import classNames from 'classnames';

type Props = HTMLAttributes<'a'> & {
  isFooter?: boolean;
};

const { href, class: className, isFooter = false, ...props } = Astro.props;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
const classLink = classNames('flex p-2 font-bold hover:text-orange-500', {
  'text-orange-500': isActive,
  'text-sky-800': !isActive && !isFooter,
  'text-white': !isActive && isFooter,
});
---

<a href={href} class={classLink} aria-current={isActive ? 'page' : undefined} {...props}>
  <slot />
</a>


src\components\Icon.astro
---
const { name, className = 'w-5 h-5 text-gray-500', ...attrs } = Astro.props;
---

<svg class={className} fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" aria-hidden="true" {...attrs}>
  {
    name === 'user' && (
      <path stroke-linecap="round" stroke-linejoin="round" d="M5.121 17.804A9 9 0 1118.88 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
    )
  }
  {
    name === 'calendar' && (
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
      />
    )
  }
  {
    name === 'tag' && (
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M7 7h.01M3 11l8.586-8.586a2 2 0 012.828 0l5.172 5.172a2 2 0 010 2.828L11 21H3v-10z"
      />
    )
  }
</svg>


src\components\Pagination.astro
---
const { currentPage, totalPages, baseUrl } = Astro.props;
---

<nav class="mt-12 flex justify-center space-x-2 text-sm mb-4">
  {
    Array.from({ length: totalPages }, (_, i) => {
      const page = i + 1;
      const isActive = page === currentPage;

      return (
        <a
          href={`${baseUrl}/${page}`}
          class={`w-9 h-9 flex items-center justify-center rounded-full border font-medium transition ${
            isActive ? 'bg-purple-700 text-white border-purple-700' : 'bg-white text-purple-700 border-gray-300 hover:bg-purple-100'
          }`}
        >
          {page}
        </a>
      );
    })
  }
</nav>


src\components\react\FormattedDate.tsx

import React from 'react'

function FormattedDate({ date }: { date: string }) {
	const _date = new Date(date)
	return (
		<time dateTime={_date.toISOString()}>
			{
				_date.toLocaleDateString('en-us', {
					year: 'numeric',
					month: 'short',
					day: 'numeric',
				})
			}
		</time>
	)
}

export default FormattedDate





src\components\react\icon.tsx
import React from 'react';
import * as Icons from 'react-icons/tb';

type Props = {
  iconName: string;
  size?: number;
};

const ReactIcon = ({ iconName, size = 32 }: Props) => {
  const Icon = Icons[iconName as keyof typeof Icons];

  if (!Icon) {
    return <div>Icon "{iconName}" not found</div>;
  }

  return <Icon size={size} />;
};

export default ReactIcon;


src\components\react\IconLink.tsx
import React from 'react';
import ReactIcon from './icon';

type LinkProps = {
  title: string;
  link: string;
  icon: string;
  className: string;
};
function IconLink({ title, link, icon, className = '', ariaLabel }: LinkProps & { ariaLabel?: string }) {
  return (
    <a className={className} href={link} target="_blank" rel="noopener noreferrer" aria-label={ariaLabel ?? `Go to ${title}`}>
      <span className="sr-only">{title}</span>
      <ReactIcon iconName={icon} />
    </a>
  );
}

export default IconLink;


src\content\config\config.json
{
  "seo": {
    "title": "jaman7-wongapl-rekrutacja-web-254455",
    "description": "Welcome to my website!",
    "siteOwner": "Krzysztof Ba³on"
  },
  "nav": [
    {
      "title": "Home",
      "link": "/"
    },
    {
      "title": "Blog",
      "link": "/blog"
    },
    {
      "title": "About",
      "link": "/about"
    }
  ],
  "contactLinks": [
    {
      "title": "GitHub",
      "link": "https://github.com/jaman7?tab=repositories",
      "icon": "TbBrandGithub"
    }
  ],
  "footerNav": [
    {
      "title": "Home",
      "link": "/"
    },
    {
      "title": "Blog",
      "link": "/blog"
    },
    {
      "title": "About",
      "link": "/about"
    }
  ]
}

src\layouts\BlogPost.astro
---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const { title, description } = Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>
  <body class="font-display text-base antialiased font-normal bg-white text-stone-700">
    <Header />
    <main class="px-4">
      <slot />
    </main>
    <Footer />
  </body>
</html>


src\pages\index.astro
---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import config from '../content/config/config.json';
import client from '../../tina/__generated__/client';
import HomePage from "../../tina/pages/HomePage.tsx";
const data = await client.queries.page({relativePath: "home.mdx"});

---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={config.seo.title} description={config.seo.description} />
	</head>
	<body class="font-display text-base antialiased font-normal bg-white text-stone-700">
		<Header />
		<HomePage {...data} client:tina />
		<Footer />
	</body>
</html>


src\pages\rss.xml.js
import rss from '@astrojs/rss';
import { getCollection } from 'astro:content';
import config from '../content/config/config.json'

export async function GET(context) {
	const posts = await getCollection('blog');
	return rss({
		title: config.seo.title,
		description: config.seo.description,
		site: context.site,
		items: posts.map((post) => ({
			...post.data,
			link: `/blog/${post.id}/`,
		})),
	});
}


src\pages\[...slug].astro
---
import { getCollection } from 'astro:content';
import client from '../../tina/__generated__/client';
import Page from '../../tina/pages/Page';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import BaseHead from '../components/BaseHead.astro';
import config from '../content/config/config.json';

export async function getStaticPaths() {
  const page = await getCollection('page');
  return page.map((p) => ({
    params: { slug: p.id },
    props: {
      getTinaProps: async () =>
        client.queries.page({
          relativePath: p.data.tinaInfo.relativePath,
        }),
    },
  }));
}

const { getTinaProps } = Astro.props;
const data = await getTinaProps();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={data.data.page.seoTitle} description={config.seo.description} />
  </head>
  <body>
    <Header />
    <Page {...data} client:tina />
    <Footer />
  </body>
</html>


src\pages\blog\index.astro
---
export async function GET() {
  return new Response(null, {
    status: 302,
    headers: {
      Location: '/blog/page/1',
    },
  });
}
---

<html lang="en">
  <head>
    <meta http-equiv="refresh" content="0; URL=/blog/page/1" />
  </head>
  <body>
    <p>Redirecting to <a href="/blog/page/1">/blog/page/1</a>…</p>

    <noscript>
      <meta http-equiv="refresh" content="0; URL=/blog/page/1" />
    </noscript>
  </body>
</html>


src\pages\blog\[...slug].astro
---
import { getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import BlogCard from '../../components/BlogCard.astro';
import client from '../../../tina/__generated__/client';
import AdminBlogPost from '../../../tina/pages/AdminBlogPost';

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  return posts?.map((post) => ({
    params: { slug: post?.id },
    props: {
      post,
      getTinaProps: async () =>
        client.queries.blog({
          relativePath: post?.data?.tinaInfo.relativePath,
        }),
    },
  }));
}

const { slug } = Astro.params;

const { getTinaProps } = Astro.props;
const tinaProps = await getTinaProps();
---

<BlogPost {...tinaProps}>
  <AdminBlogPost {...tinaProps} client:tina />

  <section class="mt-12">
    <h2 class="text-2xl font-bold mb-4">Recent Posts</h2>
    <div class="grid sm:grid-cols-2 md:grid-cols-3 gap-4">
      {
        (await getCollection('blog'))
          .filter((p) => p?.id !== slug)
          .slice(0, 3)
          .map((p) => <BlogCard post={p} />)
      }
    </div>
  </section>
</BlogPost>


src\pages\blog\page\[page].astro
---
import { getCollection } from 'astro:content';
import Pagination from '../../../components/Pagination.astro';
import BlogCard from '../../../components/BlogCard.astro';
import Layout from '../../../layouts/BlogPost.astro';

export async function getStaticPaths() {
  const PAGE_SIZE = 9;
  const posts = await getCollection('blog');
  const totalPages = Math.ceil(posts.length / PAGE_SIZE);

  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: `${i + 1}` },
  }));
}

const PAGE_SIZE = 9;

const posts = (await getCollection('blog')).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
const currentPage = parseInt(Astro.params.page ?? '1');
const start = (currentPage - 1) * PAGE_SIZE;
const paginatedPosts = posts.slice(start, start + PAGE_SIZE);
const totalPages = Math.ceil(posts.length / PAGE_SIZE);
---

<Layout title="Blog">
  <section>
    <h1 class="text-4xl font-extrabold text-center text-purple-800 my-8">Blog</h1>

    <div class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
      {paginatedPosts?.map((post) => <BlogCard post={post} />)}
    </div>

    <Pagination currentPage={currentPage} totalPages={totalPages} baseUrl="/blog/page" />
  </section>
</Layout>


src\styles\global.css
@import 'tailwindcss';

@theme {
  --font-display: 'Roboto', 'sans-serif';
}

@layer components {
  .blog-card {
    @apply bg-white rounded-2xl shadow-md hover:shadow-xl transition overflow-hidden flex flex-col;
  }
}

@layer base {
  h1,
  h2 {
    @apply font-bold text-sky-800;
  }

  body {
    @apply font-display bg-white text-gray-800;
  }
}


tina\config.ts
import { defineConfig } from 'tinacms';
import { BlogCollection } from './collections/blog';
import { footerCollection } from './collections/footer';
import { GlobalConfigCollection } from './collections/global-config';
import { PageCollection } from './collections/page';

const branch = process.env.GITHUB_BRANCH || 'main';

export default defineConfig({
  branch,
  clientId: process.env.TINA_PUBLIC_CLIENT_ID,
  token: process.env.TINA_TOKEN,

  build: {
    outputFolder: 'admin',
    publicFolder: 'public',
  },
  media: {
    tina: {
      mediaRoot: '',
      publicFolder: 'public',
    },
  },
  schema: {
    collections: [BlogCollection, PageCollection, GlobalConfigCollection, footerCollection],
  },
});


tina\collections\blog.ts
import type { Collection } from 'tinacms';

export const BlogCollection: Collection = {
  name: 'blog',
  label: 'Blogs',
  path: 'src/content/blog',
  format: 'mdx',
  ui: {
    router({ document }) {
      return `/blog/${document._sys.filename}`;
    },
  },
  fields: [
    {
      type: 'string',
      name: 'title',
      label: 'Title',
      isTitle: true,
      required: true,
    },
    {
      name: 'description',
      label: 'Description',
      type: 'string',
    },
    {
      name: 'pubDate',
      label: 'Publication Date',
      type: 'datetime',
    },
    {
      name: 'updatedDate',
      label: 'Updated Date',
      type: 'datetime',
    },
    {
      name: 'heroImage',
      label: 'Hero Image',
      type: 'image',
    },
    {
      name: 'author',
      label: 'Author',
      type: 'string',
    },
    {
      name: 'category',
      label: 'Category',
      type: 'string',
    },
    {
      type: 'rich-text',
      name: 'body',
      label: 'Body',
      isBody: true,
    },
  ],
};


tina\collections\footer.ts
import type { Collection } from 'tinacms';

export const footerCollection: Collection = {
  label: 'Footer',
  name: 'footer',
  path: 'src/content/footer',
  format: 'mdx',
  ui: {
    allowedActions: { create: false, delete: false }, // tylko edycja
  },
  fields: [
    {
      name: 'body',
      label: 'Footer Text',
      type: 'rich-text',
      isBody: true,
    },
  ],
};


tina\collections\global-config.ts
import type { Collection } from 'tinacms';
import IconComponent from '../components/IconComponent';

export const GlobalConfigCollection: Collection = {
  name: 'config',
  label: 'Global Config',
  path: 'src/content/config',
  format: 'json',
  ui: {
    global: true,
  },
  fields: [
    {
      name: 'seo',
      label: 'General site config',
      type: 'object',
      fields: [
        {
          name: 'title',
          label: 'Site title for SEO',
          type: 'string',
          required: true,
        },
        {
          name: 'description',
          label: 'Site description for SEO',
          type: 'string',
          required: true,
        },
        {
          name: 'siteOwner',
          label: 'Your Name, Company Name (Used in the footer',
          required: true,
          type: 'string',
          ui: {
            defaultValue: 'Your name here',
          },
        },
        // Add more settings here...
      ],
    },
    {
      name: 'nav',
      label: 'Site Navigation Menu (Reorder, Add, Remove)',
      type: 'object',
      list: true,
      ui: {
        itemProps: (item) => {
          return {
            label: item.title,
          };
        },
      },
      fields: [
        {
          name: 'title',
          label: 'Title of Nav Item',
          type: 'string',
          required: true,
        },
        {
          name: 'link',
          label: 'Path of the Nav Item',
          type: 'string',
          required: true,
        },
      ],
    },
    {
      name: 'contactLinks',
      label: 'Contact Links',
      type: 'object',
      list: true,
      ui: {
        itemProps: (item) => {
          return {
            label: item.title,
          };
        },
      },
      fields: [
        {
          name: 'title',
          label: 'Title',
          type: 'string',
        },
        {
          name: 'link',
          label: 'Link',
          type: 'string',
        },
        {
          name: 'icon',
          label: 'Icon',
          type: 'string',
          ui: {
            //@ts-ignore
            component: IconComponent,
          },
        },
      ],
    },
    {
      name: 'footerNav',
      label: 'Footer Site Navigation Menu (Reorder, Add, Remove)',
      type: 'object',
      list: true,
      ui: {
        itemProps: (item) => {
          return {
            label: item.title,
          };
        },
      },
      fields: [
        {
          name: 'title',
          label: 'Title of Nav Item',
          type: 'string',
          required: true,
        },
        {
          name: 'link',
          label: 'Path of the Nav Item',
          type: 'string',
          required: true,
        },
      ],
    },

    // Add other config fields here...
  ],
};


tina\collections\page.ts
import type { Collection } from "tinacms";

export const PageCollection: Collection = {
  name: "page",
  label: "Pages",
  path: "src/content/page",
  format: "mdx",
  ui: {
    router: ({ document }) => {
      return `/${document._sys.filename}`;
    },
  },
  fields: [
    {
      name: "seoTitle",
      type: "string",
      required: true
    },
    {
      name: "body",
      type: "rich-text",
      isBody: true,
      required: true
    }
  ]
}


tina\components\IconComponent.tsx
import React, { useState, useRef, useEffect } from "react";
import { wrapFieldsWithMeta } from "tinacms";
import * as tb from "react-icons/tb";
import { useVirtualizer } from "@tanstack/react-virtual";

const IconComponent = wrapFieldsWithMeta((props) => {
	const [searchQuery, setSearchQuery] = useState("");
	const [containerWidth, setContainerWidth] = useState(0);
	const iconName = props.input.value as unknown as keyof typeof tb;

	const iconSize = 50; // Size of each icon box
	const gapSize = 10; // Gap between items

	const parentRef = useRef<HTMLDivElement>(null);

	const filteredIcons = Object.keys(tb).filter((iconKey) =>
		iconKey.toLowerCase().includes(searchQuery.toLowerCase())
	);

	const itemsPerRow = Math.max(
		1,
		Math.floor((containerWidth + gapSize) / (iconSize + gapSize))
	);

	const totalRows = Math.ceil(filteredIcons.length / itemsPerRow);

	const rowVirtualizer = useVirtualizer({
		count: totalRows,
		getScrollElement: () => parentRef.current,
		estimateSize: () => iconSize + gapSize,
		overscan: 5,
	});

	useEffect(() => {
		const updateWidth = () => {
			if (parentRef.current) {
				setContainerWidth(parentRef.current.offsetWidth);
			}
		};
		updateWidth();
		window.addEventListener("resize", updateWidth);
		return () => window.removeEventListener("resize", updateWidth);
	}, []);

	const handleIconSelect = (name: keyof typeof tb) => {
		props.input.onChange(name);
	};

	return (
		<div>
			<div style={{ marginBottom: "1rem" }}>
				<strong>Selected Icon:</strong>{" "}
				{iconName ? React.createElement(tb[iconName], { size: 24 }) : "None"}
			</div>

			<div style={{ marginBottom: "1rem" }}>
				<input
					type="text"
					placeholder="Search icons..."
					value={searchQuery}
					onChange={(e) => setSearchQuery(e.target.value)}
					style={{
						width: "100%",
						padding: "8px",
						border: "1px solid #ddd",
						borderRadius: "4px",
					}}
				/>
			</div>

			<div
				ref={parentRef}
				style={{
					maxHeight: "300px",
					overflowY: "auto",
					border: "1px solid #ddd",
					padding: "10px",
					borderRadius: "4px",
					position: "relative",
				}}
			>
				<div
					style={{
						height: `${rowVirtualizer.getTotalSize()}px`,
						position: "relative",
					}}
				>
					{rowVirtualizer.getVirtualItems().map((virtualRow) => {
						const startIndex = virtualRow.index * itemsPerRow;
						const endIndex = Math.min(
							startIndex + itemsPerRow,
							filteredIcons.length
						);

						return (
							<div
								key={virtualRow.key}
								style={{
									position: "absolute",
									top: `${virtualRow.start}px`,
									left: 0,
									display: "flex",
									gap: `${gapSize}px`,
								}}
							>
								{filteredIcons.slice(startIndex, endIndex).map((iconKey) => {
									const Icon = tb[iconKey as keyof typeof tb];
									const isSelected = iconKey === iconName;
									return (
										<div
											key={iconKey}
											onClick={() => handleIconSelect(iconKey as keyof typeof tb)}
											style={{
												cursor: "pointer",
												padding: "5px",
												border: isSelected
													? "2px solid blue"
													: "2px solid transparent",
												borderRadius: "4px",
												textAlign: "center",
												width: `${iconSize}px`,
												height: `${iconSize}px`,
												display: "flex",
												alignItems: "center",
												justifyContent: "center",
											}}
										>
											<Icon size={24} />
										</div>
									);
								})}
							</div>
						);
					})}
				</div>
			</div>
		</div>
	);
});

export default IconComponent;



tina\pages\AdminBlogPost.tsx
import React from 'react';
import { tinaField, useTina } from 'tinacms/dist/react';
import type { BlogQuery, BlogQueryVariables } from '../__generated__/types';
import { TinaMarkdown } from 'tinacms/dist/rich-text';
import FormattedDate from '../../src/components/react/FormattedDate.tsx';
import Icon from '../../src/components/react/icon.tsx';

type Props = {
  variables: BlogQueryVariables;
  data: BlogQuery;
  query: string;
};

export default function AdminBlogPost(props: Props) {
  const { data } = useTina({
    query: props.query,
    variables: props.variables,
    data: props.data,
  });

  const blog = data.blog;

  return (
    <article className="max-w-3xl mx-auto py-10 prose prose-lg">
      <h1 className="text-lg mb-2" data-tina-field={tinaField(blog, 'title')}>
        {blog?.title}
      </h1>
      <p className="text-sm text-gray-500 m-0 flex gap-4">
        <span data-tina-field={tinaField(blog, 'author')} className="flex items-center gap-1">
          <Icon iconName="TbUser" size={20} /> {blog?.author}
        </span>
        <span data-tina-field={tinaField(blog, 'updatedDate')} className="flex items-center gap-1">
          <Icon iconName="TbCalendarMonth" size={20} /> <FormattedDate date={blog?.pubDate || ''} />
        </span>
        {blog?.category && (
          <span data-tina-field={tinaField(blog, 'category')} className="flex items-center gap-1">
            <Icon iconName="TbTag" size={20} /> {blog?.category}
          </span>
        )}
      </p>
      <div data-tina-field={tinaField(blog, 'heroImage')} className="block">
        {blog.heroImage && <img className="my-2 rounded-lg" src={blog.heroImage} alt="" />}
      </div>

      <div data-tina-field={tinaField(blog, 'body')}>
        <TinaMarkdown content={blog.body} />
      </div>
    </article>
  );
}


tina\pages\FooterText.tsx
import { useTina } from 'tinacms/dist/react';
import { TinaMarkdown } from 'tinacms/dist/rich-text';
import type { FooterQuery, FooterQueryVariables } from '../../tina/__generated__/types';

type Props = {
  variables: FooterQueryVariables;
  data: FooterQuery;
  query: string;
};

const FooterText = (props: Props) => {
  const { data } = useTina({
    query: props.query,
    variables: props.variables,
    data: props.data,
  });

  const footer = data.footer;

  return <TinaMarkdown content={footer?.body} />;
};

export default FooterText;


tina\pages\HomePage.tsx
import { tinaField, useTina } from "tinacms/dist/react";
import type { PageQuery, PageQueryVariables } from "../__generated__/types";
import { TinaMarkdown } from "tinacms/dist/rich-text";

type Props = {
	variables: PageQueryVariables;
	data: PageQuery;
	query: string;
}

const HomePage = (props: Props) => {
	const { data } = useTina({
		query: props.query,
		variables: props.variables,
		data: props.data,
	})

	const page = data.page;


	return (
		<main>
			<div data-tina-field={tinaField(page, "body")}>
				<TinaMarkdown content={page.body} />
			</div>
		</main>
	)
}

export default HomePage;


tina\pages\Page.tsx
import { tinaField, useTina } from "tinacms/dist/react";
import type { PageQuery, PageQueryVariables } from "../__generated__/types";
import { TinaMarkdown } from "tinacms/dist/rich-text";

type Props = {
	variables: PageQueryVariables;
	data: PageQuery;
	query: string;
}

const TinaPage = (props: Props) => {
	const { data } = useTina({
		query: props.query,
		variables: props.variables,
		data: props.data,
	})

	const page = data.page;

	return (
		<main>
			<div data-tina-field={tinaField(page, "body")}>
				<TinaMarkdown content={page.body} />
			</div>
		</main>
	)
}

export default TinaPage;


